#!/usr/bin/env bash 
# -*- coding: utf-8; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*-

# set -x
set `process_arguments $@`

CONF_PATH=`realpath $1`
MACHINE=$2
DISTRO=$3
IMAGE=$4
OPTIONS=$5

# TODO command parameters

NPROC=`nproc`
# COMBO_URL=http://git.yoctoproject.org/cgit/cgit.cgi/poky/plain/scripts/combo-layer 
COMBO_URL=http://cgit.openembedded.org/openembedded-core/plain/scripts/combo-layer

ROOT_DIR=`pwd`
REPOS_DIR=$ROOT_DIR/repos
SRC_DIR=$ROOT_DIR/src
SRC_SCRIPTS_DIR=$SRC_DIR/scripts
SRC_CONF_DIR=$SRC_DIR/conf

SRC_CONF_PATH=$SRC_CONF_DIR/combo-layer.conf
SRC_COMBO_SCRIPT=$SRC_SCRIPTS_DIR/combo-layer
SRC_BUILD_DIR=$SRC_DIR/build

# Create the source folder
if [ -d $SRC_DIR ]; then
    rm -rf $SRC_DIR
fi
mkdir -p $SRC_DIR
mkdir -p $SRC_SCRIPTS_DIR
mkdir -p $SRC_CONF_DIR

# Download combo-layer script from oe-core repository
if [ ! -f $SRC_COMBO_SCRIPT ]; then
    wget $COMBO_URL -O $SRC_COMBO_SCRIPT
    chmod a+x $SRC_COMBO_SCRIPT
fi

# Create the configuration folder into the source folder
if [ ! -d $SRC_CONF_DIR ]; then
    mkdir -p $SRC_CONF_DIR
fi

# Copy the combo layer configuration to the configuration folder
if [ ! -f $SRC_CONF_PATH ]; then
    cp $CONF_PATH $SRC_CONF_PATH
fi

# Change current directory to the source folder to run combo-layer script
cd $SRC_DIR

# Update environment to run combo-layer script
export LOCAL_REPO_DIR=$REPOS_DIR
export DEST_DIR=$SRC_DIR

# Run combo-layer script to initialize repos
$SRC_COMBO_SCRIPT init -D -c $SRC_CONF_PATH

# # Read combo-layer configuration file to obtain the name of all layers used
# LAYERS_NAME=""
# for LINE in `sed 's:#.*$::g' $SRC_CONF_PATH | cat`; do
#     if [[ $LINE =~ ^\[(.+)\]$ ]]; then
#         # LAYERS_NAME+="${BASH_REMATCH[1]} "
#         LAYERS_NAME="$LAYERS_NAME ${BASH_REMATCH[1]}"
#     fi
# done

# # Update each layer repositories
# for LAYER_NAME in $LAYERS_NAME; do
#     $SRC_COMBO_SCRIPT update $LAYER_NAME -c $SRC_CONF_PATH
# done

# List of all layers which contains a local.conf
BBLAYERS_NAME=""
TMP_LIST=`find $SRC_DIR -name "layer.conf"`
for TMP in $TMP_LIST; do
    case $TMP in
        *meta-skeleton*|*meta-selftest*)
            continue
            ;;
        
        *meta-*)
            BBLAYERS_NAME="$BBLAYERS_NAME $(dirname $(dirname $TMP))"
            ;;

        *)
            continue
            ;;
    esac
done

# Init the build environment
source $SRC_DIR/oe-init-build-env $SRC_BUILD_DIR

# Edit the local.conf file of current build
LOCAL_CONF_FILE=$SRC_BUILD_DIR/conf/local.conf
sed -i "s/^DISTRO ?= .*$/DISTRO ?= \"$DISTRO\"/" \
    $LOCAL_CONF_FILE
sed -i "/^#MACHINE ?= \"$MACHINE\"/s/$/\\nMACHINE ?= \"$MACHINE\"/" \
    $LOCAL_CONF_FILE
sed -i "s/^#BB_NUMBER_THREADS.*$/BB_NUMBER_THREADS\ =\ \"$NPROC\"/" \
    $LOCAL_CONF_FILE
sed -i "s/^#PARALLEL_MAKE.*$/PARALLEL_MAKE\ =\ \"-j$NPROC\"/" \
    $LOCAL_CONF_FILE

# Edit the bblayers.conf file of current build
BBLAYERS_CONF_FILE=$SRC_BUILD_DIR/conf/bblayers.conf
for BBLAYER_NAME in $BBLAYERS_NAME; do
    grep -Fq "$BBLAYER_NAME" $BBLAYERS_CONF_FILE
    if [ $? -ne 0 ]; then
        echo "BBLAYERS += \"$BBLAYER_NAME\"" >> $BBLAYERS_CONF_FILE
    fi
done

# Used to run CI tests without to build the image
if [ "$OPTIONS" == "--not-build" ]; then
    exit 0
fi

# Build the image
bitbake $IMAGE

# Return to the root folder
cd $ROOT_DIR

exit 0
