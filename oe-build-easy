#!/usr/bin/env bash
# -*- coding: utf-8; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*-

# A script to made easily an embedded Linux system with OpenEmbedded/Poky from
# scratch with a combo-layer configurations
# Copyright (C) 2014  Thomas Perrot <thomas.perrot@tupi.fr>

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA

# -----------------------------------------------------------------------------
# Usage function 
# -----------------------------------------------------------------------------
function usage
{
    cat<<EOF
Usage:
  $1 [options] CONFIG_PATH

Options:
  -c, --compodir COMBO_PATH  Directory path of components
  -C, --combodir COMPO_PATH  Directory path of combination
  -i, --image IMAGE          Name of target image
  -m, --machine MACHINE      Name of target machine
  -d, --distro DISTRO        Name of distribution
  -b, --build PATH           Directory path of build
  -H, --history PATH         Directory path of buildhistory
  -p, --packages CLASSES     List of packaging formats to enable
  -o, --options OPTIONS      Additional BitBake's options

  -D, --debug  Print debug message
  -h, --help   Print usage message
EOF
}

# -----------------------------------------------------------------------------
# Main function
# -----------------------------------------------------------------------------
NAME=$(basename $0)

if [ $# -lt 1 ]; then
    usage $NAME
    exit 1
fi

NPROC=$(nproc)
ROOT_DIR=$(pwd)
COMBO_URL=http://cgit.openembedded.org/openembedded-core/plain/scripts/combo-layer
# COMBO_URL=http://git.yoctoproject.org/cgit/cgit.cgi/poky/plain/scripts/combo-layer

# Initialize parameters and options to their default value
DEBUG=0
COMPO_DIR=$ROOT_DIR/components
COMBO_DIR=$ROOT_DIR/combination
IMAGE=core-image-minimal
MACHINE=qemux86
DISTRO=
BUILD=$COMBO_DIR/build
HISTORY=$BUILD/buildhistory
PACKAGES="package_rpm"
OPTIONS=

CONFIG=

# Parse parameter and options
while [[ $# > 0 ]]; do
    case $1 in
        -D|--debug)
            DEBUG=1
            set -x
            ;;
        -h|--help)
            usage $NAME;
            exit 0
            ;;
        -c|--compodir)
            shift
            COMPO_DIR=`realpath $1`
            ;;
        -C|--combodir)
            shift
            COMBO_DIR=`realpath $1`
            ;;
        -i|--image)
            shift
            IMAGE=$1
            ;;
        -m|--machine)
            shift
            MACHINE=$1
            ;;
        -d|--distro)
            shift
            DISTRO=$1
            ;;
        -b|--build)
            shift
            BUILD=$(realpath -m $1)
            ;;
        -H|--history)
            shift
            HISTORY=$(realpath -m $1)
            ;;
        -p|--packages)
            shift
            PACKAGES=$1
            ;;
        -o|--options)
            shift
            OPTIONS=$1
            ;;
        *)
            if [ -z $CONFIG ]; then
                CONFIG=$(realpath $1)
            else
                usage $NAME;
                exit 1
            fi
            ;;
    esac
    shift
done

if [ -z $CONFIG ]; then
    usage $NAME ;
    exit 1
elif [ ! -f $CONFIG ]; then
    echo "Configuration file doesn't exist: $CONFIG"
    exit 1
fi

# Initialize vars
SRC_SCRIPTS_DIR=$COMBO_DIR/scripts
SRC_CONF_DIR=$COMBO_DIR/conf

SRC_CONF_PATH=$SRC_CONF_DIR/combo-layer.conf
SRC_COMBO_SCRIPT=$SRC_SCRIPTS_DIR/combo-layer
SRC_BUILD_DIR=$BUILD

# Create the source folder
if [ -d $COMBO_DIR ]; then
    echo "$COMBO_DIR already exist."
else
    mkdir -p $COMBO_DIR
    mkdir -p $SRC_SCRIPTS_DIR
    mkdir -p $SRC_CONF_DIR
fi

# Download combo-layer script from oe-core repository
if [ -f $SRC_COMBO_SCRIPT ]; then
    echo "$SRC_COMBO_SCRIPT already exist."
else
    wget $COMBO_URL -O $SRC_COMBO_SCRIPT
    chmod a+x $SRC_COMBO_SCRIPT
fi

# Create the configuration folder into the source folder
if [ -d $SRC_CONF_DIR ]; then
    echo "$SRC_CONF_DIR already exist."
else
    mkdir -p $SRC_CONF_DIR
fi

# Copy the combo layer configuration to the configuration folder
if [ -f $SRC_CONF_PATH ]; then
    echo "$SRC_CONF_PATH already exist."
else
    cp $CONFIG $SRC_CONF_PATH
fi

# Change current directory to the source folder to run combo-layer script
cd $COMBO_DIR

# Update environment to run combo-layer script
export LOCAL_REPO_DIR=$COMPO_DIR
export DEST_DIR=$COMBO_DIR

# Run combo-layer script to initialize repos
if [ $DEBUG -eq 0 ]; then
    $SRC_COMBO_SCRIPT init -c $SRC_CONF_PATH
else
    $SRC_COMBO_SCRIPT init -D -c $SRC_CONF_PATH
fi

# # Read combo-layer configuration file to obtain the name of all layers used
# LAYERS_NAME=""
# for LINE in `sed 's:#.*$::g' $SRC_CONF_PATH | cat`; do
#     if [[ $LINE =~ ^\[(.+)\]$ ]]; then
#         # LAYERS_NAME+="${BASH_REMATCH[1]} "
#         LAYERS_NAME="$LAYERS_NAME ${BASH_REMATCH[1]}"
#     fi
# done

# # Update each layer repositories
# for LAYER_NAME in $LAYERS_NAME; do
#     $SRC_COMBO_SCRIPT update $LAYER_NAME -c $SRC_CONF_PATH
# done

# List of all layers which contains a local.conf
BBLAYERS_NAME=""
TMP_LIST=`find $COMBO_DIR -name "layer.conf"`
for TMP in $TMP_LIST; do
    case $TMP in
        *meta-skeleton*|*meta-tlk*)
            continue
            ;;
        *meta-*)
            BBLAYERS_NAME="$BBLAYERS_NAME $(dirname $(dirname $TMP))"
            ;;
        *)
            continue
            ;;
    esac
done

# Initialize the build environment
source $COMBO_DIR/oe-init-build-env $SRC_BUILD_DIR

# Edit the local.conf file of current build
LOCAL_CONF_FILE=$SRC_BUILD_DIR/conf/local.conf

# Inform the DISTRO field
sed -i "s/^DISTRO ?= .*$/DISTRO ?= \"$DISTRO\"/" \
    $LOCAL_CONF_FILE

grep -Fq "DISTRO ?= \"$DISTRO\"" $LOCAL_CONF_FILE
if [ $? -ne 0 ]; then
    echo "DISTRO ?= \"$DISTRO\"" >> $LOCAL_CONF_FILE
fi

# Inform the MACHINE field
sed -i "s/^#MACHINE ?= \"$MACHINE\".*$/MACHINE ?= \"$MACHINE\"/" \
    $LOCAL_CONF_FILE
grep -Fq "MACHINE ?= \"$MACHINE\"" $LOCAL_CONF_FILE
if [ $? -ne 0 ]; then
    sed -i "/^MACHINE ??= .*$/s/$/\\nMACHINE ?= \"$MACHINE\"/" \
        $LOCAL_CONF_FILE
fi
grep -Fq "MACHINE ?= \"$MACHINE\"" $LOCAL_CONF_FILE
if [ $? -ne 0 ]; then
    echo "MACHINE ?= \"$MACHINE\"" >> $LOCAL_CONF_FILE
fi

# Inform the BB_NUMBER_THREADS field
sed -i "s/^#BB_NUMBER_THREADS.*$/BB_NUMBER_THREADS\ =\ \"$NPROC\"/" \
    $LOCAL_CONF_FILE

# Inform the PARALLEL_MAKE field
sed -i "s/^#PARALLEL_MAKE.*$/PARALLEL_MAKE\ =\ \"-j$NPROC\"/" \
    $LOCAL_CONF_FILE

# Remove extra image configuration defaults
sed -i "s/^EXTRA_IMAGE_FEATURES = .*$/EXTRA_IMAGE_FEATURES = \"\"/" \
    $LOCAL_CONF_FILE

# Inform the BUILDHISTORY_DIR field
grep -Fq "BUILDHISTORY_DIR ?= \"$HISTORY\"" $LOCAL_CONF_FILE
if [ $? -ne 0 ]; then
    echo "BUILDHISTORY_DIR ?= \"$HISTORY\"" >> $LOCAL_CONF_FILE
fi

# Inform the PACKAGE_CLASSES field
sed -i "s/^PACKAGE_CLASSES ?= .*$/PACKAGE_CLASSES ?= \"$PACKAGES\"/" \
    $LOCAL_CONF_FILE

grep -Fq "PACKAGE_CLASSES ?= \"$PACKAGES\"" $LOCAL_CONF_FILE
if [ $? -ne 0 ]; then
    echo "PACKAGE_CLASSES ?= \"$PACKAGES\"" >> $LOCAL_CONF_FILE
fi

# Edit the bblayers.conf file of current build
BBLAYERS_CONF_FILE=$SRC_BUILD_DIR/conf/bblayers.conf
for BBLAYER_NAME in $BBLAYERS_NAME; do
    grep -Rq "$BBLAYER_NAME[^/]" $BBLAYERS_CONF_FILE \
        || echo "BBLAYERS += \"$BBLAYER_NAME\"" >> $BBLAYERS_CONF_FILE
done

if [ $DEBUG -eq 1 ] && [[ ! $OPTIONS =~ .*-DDD.* ]]; then
    bitbake -DDD $OPTIONS $IMAGE 
else
    bitbake $OPTIONS $IMAGE
fi

# Return to the root folder
# cd $ROOT_DIR

exit 0

